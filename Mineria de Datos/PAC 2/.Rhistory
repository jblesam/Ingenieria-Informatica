plot(cut_avg)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:6)
abline(h = 3, col = 'red')
plot(seed_hierarchy)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:6)
abline(h = 3, col = 'red')
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 1:3)
abline(h = 3, col = 'red')
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 1:3)
abline(h = 4, col = 'red')
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 1:3)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:8)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = rainbow)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 1:5)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:5)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:4)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:2)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:3)
plot(seed_hierarchy)
rect.hclust(seed_hierarchy , k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy)
rect.hclust(seed_hierarchy, k = 3, border = 2:4, col=as.factor(seedData$class))
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class))
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class), type="p")
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=seedData$class)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class), type="p")
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class))
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
potato
potato
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class))
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class), main=NULL)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class),xlab=NULL,ylab=NULL,main=NULL)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
View(seeds_train)
dist_mat <- dist(seedData, method = 'euclidean')
hclust_avg <- hclust(dist_mat, method = 'average')
plot(hclust_avg)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class),xlab=NULL,ylab=NULL,main=NULL)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average', ann=FALSE)
plot(seed_hierarchy, col=as.factor(seedData$class))
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
plot(seed_hierarchy, col=as.factor(seedData$class), ann = FALSE)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
pintat <- color_branches(seed_hierarchy , h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
library(dendextend)
install.packages(dendextend)
install.packages(dendextend, dependencies = TRUE)
install.packages('dendextend', dependencies = TRUE)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
pintat <- color_branches(seed_hierarchy , h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
avg_dend_obj <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(avg_dend_obj , h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
library(dendextend)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
avg_dend_obj <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(avg_dend_obj , h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
pintat <- color_branches(seed_hierarchy , h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
hierarchy_dend <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(hierarchy_dend, h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
hierarchy_dend <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(hierarchy_dend, h=3)
plot(pintat)
rect.hclust(seed_hierarchy, k = 4, border = 2:4)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
hierarchy_dend <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(hierarchy_dend, h=5)
plot(pintat)
rect.hclust(seed_hierarchy, k = 5, border = 2:4)
View(seedData)
View(seedData)
distancies <- dist(seeds, method = 'euclidean')
seed_hierarchy <- hclust(distancies, method = 'average')
hierarchy_dend <- as.dendrogram(seed_hierarchy)
pintat <- color_branches(hierarchy_dend, h=3, clusters = seedData[,8])
plot(pintat)
rect.hclust(seed_hierarchy, k = 3, border = 2:4)
seeds_df_cl <- mutate(seedData, cluster = cut_avg)
count(seeds_df_cl,cluster)
library(dplyr)
seeds_df_cl <- mutate(seedData, cluster = cut_avg)
count(seeds_df_cl,cluster)
table(seeds_df_cl$cluster,seedData[,8])
seeds_df_cl <- mutate(seedData, cluster = cut_avg)
table(seeds_df_cl$cluster,seedData[,8])
100*(65 + 65 + 70)/(200+(5+3+2))
for(i in c(1,2,3,4,5,6,7))
{
iNearest <- knn(seeds_train,seeds_test,cl=seeds_train_class,k=i)
taula <- table(iNearest,seeds_test_class)
print(paste("for ", i, " neighbours, we have a precission of ", precissio(taula)))
i=i+1
}
cls
clear
cln
clc
# install.packages("arules")
library(arules)
data("Groceries")
?Groceries
inspect(head(Groceries, 5))
itemFrequencyPlot(Groceries,topN=20,type="absolute")
grocery_rules <- apriori(Groceries, parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(grocery_rules, by = "confidence"), 3))
inspect(head(sort(grocery_rules, by = "support"), 3))
inspect(head(sort(grocery_rules, by = "lift"), 3))
library(arules)
data("Groceries")
?Groceries
inspect(head(Groceries, 5))
itemFrequencyPlot(Groceries,topN=20,type="absolute")
grocery_rules <- apriori(Groceries, parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(grocery_rules, by = "confidence"), 3))
inspect(head(sort(grocery_rules, by = "support"), 3))
inspect(head(sort(grocery_rules, by = "lift"), 3))
lastfmData <- read.csv('lastfm.csv', header=TRUE, )
View(lastfmData)
summary(lastfmData)
any(is.na(lastfmData))
head(lastfmData)
View(Groceries)
View(Groceries)
head(Groceries)
inspect(head(Groceries, 5))
inspect(head(lastfmData, 5))
inspect(head(lastfmData))
lastfmData <- read.csv('lastfm.csv', header=TRUE)
any(is.na(lastfmData))
summary(lastfmData)
lastfmData(1203)
lastfmData[1203]
lastfmData[1203,]
lastfmData[1204,]
lastfmData[1202,]
lastfmData"2453",]
lastfmData[2543,]
lastfmData[55,]
lastfmData[55,]
lastfmData[294,]
lastfmData[6046,]
lastfmData[55,]
lastfmData[4306,]
lastfmData[88952,]
lastfmData[2691,]
lastfmData[2583,]
itemFrequencyPlot(Groceries,topN=20,type="absolute")
itemFrequencyPlot(lastfmData,topN=20,type="absolute")
itemFrequencyPlot(lastfmData[,2],topN=20,type="absolute")
lastfmData[,2]
itemFrequencyPlot(Groceries,topN=20,type="absolute")
radio_rules <- apriori(lastfmData, parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(radio_rules , by = "confidence"), 3))
inspect(head(sort(radio_rules, by = "support"), 3))
inspect(head(sort(radio_rules, by = "lift"), 3))
radio_rules <- apriori(lastfmData[,2-4], parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(radio_rules, by = "confidence"), 3))
inspect(head(sort(radio_rules, by = "support"), 3))
inspect(head(sort(radio_rules, by = "lift"), 3))
lastfmData[,2-4]
head(lastfmData[,2-4])
head(lastfmData[,2:4])
radio_rules <- apriori(lastfmData[,2:4], parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(radio_rules, by = "confidence"), 3))
inspect(head(sort(radio_rules, by = "support"), 3))
inspect(head(sort(radio_rules, by = "lift"), 3))
inspect(head(sort(grocery_rules, by = "confidence"), 3))
itemFrequencyPlot(Groceries,topN=20,type="absolute")
head(Groceries)
df_groceries2 <- read.csv("Groceries_dataset.csv")
head(df_groceries2)
head(lastfmData)
df_sorted2 <- df_groceries2[order(df_groceries2$Member_number),]
head(df_sorted2)
df_sorted2$Member_number <- as.numeric(df_sorted2$Member_number)
> head(df_sorted2)
head(df_sorted2)
df_sorted <- df_groceries[order(df_groceries$Member_number),]
df_sorted$Member_number <- as.numeric(df_sorted$Member_number)
df_sorted2 <- df_groceries2[order(df_groceries2$Member_number),]
df_sorted2$Member_number <- as.numeric(df_sorted2$Member_number)
head(df_sorted2)
install.packages("plyr", dependencies= TRUE)
df_itemList2 <- ddply(df_groceries2,c("Member_number","Date"),
function(df1)paste(df1$itemDescription,
collapse = ","))
library(plyr)
df_itemList2 <- ddply(df_groceries2,c("Member_number","Date"),
function(df1)paste(df1$itemDescription,
collapse = ","))
head(df_itemList2)
lasfmCompact <- ddply(lastfmData,c("user","sex","country"), function(df)paste(df$artist, collapse = ","))
head(lasfmCompact)
View(lasfmCompact)
View(lasfmCompact)
radio_rules <- apriori(lasfmCompact, parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(radio_rules, by = "confidence"), 3))
inspect(head(sort(radio_rules, by = "support"), 3))
inspect(head(sort(radio_rules, by = "lift"), 3))
View(df_groceries2)
View(df_itemList2)
df_itemList2$Member_number <- NULL
df_itemList2$Date <- NULL
colnames(df_itemList2) <- c("itemList")
txn2 = read.transactions(df_itemList2, rm.duplicates= TRUE, format="basket",sep=",",cols=1);
write.csv(df_itemList2,"ItemList2.csv", qoute = FALSE, row.names = TRUE)
write.csv(df_itemList2,"ItemList2.csv", quote = FALSE, row.names = TRUE)
txn2 = read.transactions(file="ItemList2.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1);
head(txn2)
txn2@itemInfo$labels <- gsub("\"","",txn2@itemInfo$labels)
basket_rules2 <- apriori(txn2,parameter = list(sup = 0.01, conf = 0.5,target="rules"));
inspect(basket_rules)
df_basket2 <- as(basket_rules,"data.frame")
View(df_basket2)
df_basket2 <- as(basket_rules2,"data.frame")
View(df_basket2)
inspect(head(sort(basket_rules2, by = "confidence"), 3))
inspect(head(Groceries, 5))
inspect(head(txn2, 5))
?Groceries
?txn2
??txn2
View(lasfmCompact)
artistList <- ddply(lastfmData,c("user","sex","country"), function(df)paste(df$artist, collapse = ","))
View(artistList)
artistList$user <- NULL
View(artistList)
artistList$sex <- NULL
artistList$country <- NULL
colnames(artistList) <- c("artistList")
View(artistList)
write.csv(artistList,"artistList.csv", quote = FALSE, row.names = TRUE)
artistTransaction = read.transactions(file="artistList.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1);
View(artistList)
View(txn2)
txn = read.transactions(file="ItemList2.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1);
View(txn)
radio_rules <- apriori(artistTransaction, parameter = list(sup = 0.01, conf = 0.5,target="rules"));
inspect(head(sort(radio_rules, by = "confidence"), 3))
inspect(head(sort(radio_rules, by = "support"), 3))
inspect(head(sort(radio_rules, by = "lift"), 3))
plot(radio_rules, method = "grouped", control = list(k = 5))
library(arulesViz)
inspec(radio_rules)
inspect(radio_rules)
inspect(head(sort(radio_rules, by = "confidence"), 5))
inspect(head(sort(radio_rules, by = "support"), 5))
inspect(head(sort(radio_rules, by = "lift"), 5))
artistList <- ddply(lastfmData,c("user","sex","country"), function(df)paste(df$artist, collapse = ","))
colnames(artistList$V1) <- c("artistList")
colnames(artistList) <- c("user","sex", "country", "artistList")
write.csv(artistList,"artistList.csv", quote = FALSE, row.names = TRUE)
artistTransaction = read.transactions(file="artistList.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1)
radio_rules <- apriori(artistTransaction, parameter = list(sup = 0.01, conf = 0.5,target="rules"))
inspect(radio_rules)
lastfm <- read.csv("lastfm.csv")
View(lastfm)
lastfm$user <- factor(lastfm$user)
playlists <- split(x=lastfm$artist, f=lastfm$user)
View(playlists)
playlists <- lapply(playlists, unique)
playtrans <- as(playlists, "transactions")
radio_rules <- apriori(playtrans, parameter = list(sup = 0.01, conf = 0.5,target="rules"))
inspect(radio_rules)
radio_rules <- apriori(playtrans, parameter=list(support=.01, confidence=.5, maxlen=3))
inspect(radio_rules)
radio_rules <- apriori(playtrans, parameter=list(support=.01, confidence=.5, maxlen=3musicrules <- apriori(playtrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
## take a look
inspect(musicrules)
## Choose any subset you want.
inspect(subset(musicrules, subset=lift > 5))
inspect(subset(musicrules, subset=confidence > 0.6))
inspect(subset(musicrules, subset=support > .02 & confidence > 0.6))
inspect(subset(musicrules, subset=lhs%in%"the beatles"))
# grab a larger list of pairwise artist connections
artrules <- apriori(playtrans,
parameter=list(support=.001, confidence=.1, maxlen=2))
## extract the rules as strings, then change into an edge matrix
## print pairs at each step to see what I've done
pairs <- labels(artrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",] # no lhs
library(igraph)
musicnet <- graph.edgelist(pairs)
musicnet <- as.undirected(musicnet)
## full plot takes time a bit of time
V(musicnet)$color <- "cyan"
# the plot tries to force distances proportional to connectivity
# imagine nodes connected by elastic bands that you are pulling apart
# you can either add color/size/etc attributes to the graph itself, or just when you plot
# edge.curved puts straight lines between vertices; it looks good and is faster
plot(musicnet, vertex.label=NA, vertex.size=3, edge.curved=FALSE)
## look at some measures of connectivity
mbetween <- betweenness(musicnet)
mdegree <- degree(musicnet)
which.max(mbetween)
## and raw popularity
playcount <- table(lastfm$artist)[names(mdegree)]
## they're all closely related
plot(mdegree,mbetween,log="xy")
plot(as.numeric(playcount),mdegree,log="xy")
## grab the neighborhood of some bands
band <- "rush"
nei <- graph.neighborhood(musicnet, 1, V(musicnet)[band])[[1]]
V(nei)[band]$color <- "gold"
V(nei)$label.color = "black"
V(nei)$frame.color = NA
plot(nei, edge.curved=FALSE)))
artrules <- apriori(playtrans,
parameter=list(support=.001, confidence=.1, maxlen=2))
pairs <- labels(artrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",] # no lhs
library(igraph)
musicnet <- graph.edgelist(pairs)
musicnet <- as.undirected(musicnet)
## full plot takes time a bit of time
V(musicnet)$color <- "cyan"
install.packages("igraph")
pairs <- labels(artrules)
pairs <- gsub("\\{|\\}","",pairs)
pairs <- strsplit(pairs," => ")
pairs <- do.call(rbind,pairs)
pairs <- pairs[pairs[,1]!="",] # no lhs
library(igraph)
musicnet <- graph.edgelist(pairs)
musicnet <- as.undirected(musicnet)
## full plot takes time a bit of time
V(musicnet)$color <- "cyan"
plot(musicnet, vertex.label=NA, vertex.size=3, edge.curved=FALSE)
## look at some measures of connectivity
mbetween <- betweenness(musicnet)
mdegree <- degree(musicnet)
which.max(mbetween)
## and raw popularity
playcount <- table(lastfm$artist)[names(mdegree)]
## they're all closely related
plot(mdegree,mbetween,log="xy")
plot(as.numeric(playcount),mdegree,log="xy")
## grab the neighborhood of some bands
band <- "rush"
nei <- graph.neighborhood(musicnet, 1, V(musicnet)[band])[[1]]
V(nei)[band]$color <- "gold"
V(nei)$label.color = "black"
V(nei)$frame.color = NA
plot(nei, edge.curved=FALSE)
plot(nei, edge.curved=FALSE)
potato <- rep(0, 10)
potato
potato <- rep(1, 5)
potato
fit           <- kmeans(x, i)
fit           <- kmeans(x, 5)
fit$tot.withinss
bdd_data<-read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data", header=T, sep=",")
attach(bdd_data)
colnames(bdd_data) <- c("class", "Left-Weight", "Left-Distance", "Right-Weight", "Right-Distance")
summary(bdd_data)
x <- bdd_data[,2:5]
d <- daisy(x)
resultados <- rep(0,10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Número de clusters",ylab="Silueta")
library("cluster")
d <- daisy(x)
resultados <- rep(0,10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Número de clusters",ylab="Silueta")
d <- daisy(x)
resultados <- rep(0, 10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Nombre de clústers",ylab="Silueta")
d <- daisy(x)
> resultados <- rep(0, 10)
> for (i in c(2,3,4,5,6,7,8,9,10))
+ {
+     fit           <- kmeans(x, i)
+     y_cluster     <- fit$cluster
+     sk            <- silhouette(y_cluster, d)
+     resultados[i] <- mean(sk[,3])
+ }plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Nombre de clústers",ylab="Silueta")
d <- daisy(x)
resultados <- rep(0, 10)
for (i in c(2,3,4,5,6,7,8,9,10))
{
fit           <- kmeans(x, i)
y_cluster     <- fit$cluster
sk            <- silhouette(y_cluster, d)
resultados[i] <- mean(sk[,3])
}
plot(2:10,resultados[2:10],type="o",col="blue",pch=0,xlab="Nombre de clústers",ylab="Silueta")
View(x)
resultados <- rep(0, 15)
for (i in c(2,3,4,5,6,7,8,9,10,11,12,13,14,15))
{
fit           <- kmeans(x, i)
resultados[i] <- fit$tot.withinss
}
plot(2:15,resultados[2:15],type="o",col="blue",pch=0,xlab="Número de clusters",ylab="tot.tot.withinss")
library(fpc)
fit_ch  <- kmeansruns(x, krange = 2:10, criterion = "ch")
fit_asw <- kmeansruns(x, krange = 2:10, criterion = "asw")
bddclusters <- kmeans(x, 8)
# sepalLength i sepalWidth
plot(x[c(1,4)], col=bddclusters$cluster)
bddclusters <- kmeans(x, 8)
# sepalLength i sepalWidth
plot(x[c(1,4)], col=rainbow(8))
bddclusters <- kmeans(x, 8)
# sepalLength i sepalWidth
plot(x[c(1,4)], col=accent)
bddclusters <- kmeans(x, 8)
# sepalLength i sepalWidth
plot(x[c(1,4)], col=Accent)
