#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unittest

from T2019_Practica2_Skeleton import *
#from T2019_Practica2_Solution_Skeleton import *


class Test_1_1_DES(unittest.TestCase):

    def test_1(self):
        msg = "0000000000000000000000000000000000000000000000000000000000000000"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_des(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "1000110010100110010011011110100111000001101100010010001110100111")

    def test_2(self):
        msg = "0001001000110000000000011100000000000001001001000100011000000011"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_des(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "1101001110101111100100111001110011111101010111001100001101010001")

    def test_3(self):
        msg = "0001001000110000000000011100000000000001001001000100011000000011"
        key = "11111111100010001100000000000001001010000100000110001101"
        ciphertext = uoc_des(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "1100011110001111000100100001000001011001001110110111111110010000")


class Test_1_1_ECB(unittest.TestCase):

    def test_1(self):
        msg = "10101010010100101001101010101010100100101001010000000101010101011111000101011101010001001010101001010100010101010010101010011011110101001001010100000000001010110001001011001011110010101010001010101010010101010100110010100101001010010100010001010010010100101001001"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_ecb(key, msg)
        self.assertEqual(ciphertext, "11100101110111000110111110001100000110001010011110010010011001000100100111111111001011101000000001100001111101111010100110010101001111001110001010001001001100001111101011101010001111100011101010100011011101011101101111111010111010101000000001111101111010101001101010000100001010010111001111000110010111100000010101111000")


class Test_1_2_CBC(unittest.TestCase):

    def test_1(self):
        iv = "0101010101010101010101010101010100101010101010101010101010101010"
        msg = "10101010010100101001101010101010100100101001010000000101010101011111000101011101010001001010101001010100010101010010101010011011110101001001010100000000001010110001001011001011110010101010001010101010010101010100110010100101001010010100010001010010010100101001001"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_cbc(iv, key, msg)
        self.assertEqual(ciphertext, "11100010110110100010001001011011100010110110001111101011000001101100000001010111000100101010011000110110111111100001101010100101101111011001100001000110101011110010011111100101101001111111000011000010001001101000100010010111101110100010101000000101100001110110000011100110001110000001110001000111100001100001111111111111")


class Test_1_3_OFB(unittest.TestCase):

    def test_1(self):
        iv = "0101010101010101010101010101010100101010101010101010101010101010"
        msg = "10101010010100101001101010101010100100101001010000000101010101011111000101011101010001001010101001010100010101010010101010011011110101001001010100000000001010110001001011001011110010101010001010101010010101010100110010100101001010010100010001010010010100101001001"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_ofb(iv, key, msg)
        self.assertEqual(ciphertext, "11000001010001010110111110010001000010010111001001000111110000011010010000001000000100011111111101111110111111111000000000110001101111111000001011110101000100001000100100101101100010000011011011111111000000000001100111110000000000111110111011111000111110001111100100010111111101010011101110011011111001100100001010010100")

class Test_1_4_CTR(unittest.TestCase):

    def test_1(self):
        nonce = "010101010101010101010101010101010010101010101111"
        msg = "10101010010100101001101010101010100100101001010000000101010101011111000101011101010001001010101001010100010101010010101010011011110101001001010100000000001010110001001011001011110010101010001010101010010101010100110010100101001010010100010001010010010100101001001"
        key = "00000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_ctr(nonce, key, msg)
        self.assertEqual(ciphertext, "11100100000010000110010001000001101010010100111000101011101101111011010011101110010101000010011010101110110101010101110001001100100000010111001010011010111101100101110110010100000101111010111000011010001111000111101010100111111101001010111001000010010110110110001111011111011001000011111011111011000001011101101110011011")


class Test_2_1_DES3(unittest.TestCase):

    def test_1(self):
        msg = "0000000000000000000000000000000000000000000000000000000000000000"
        key = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        ciphertext = uoc_des3(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "1000110010100110010011011110100111000001101100010010001110100111")

    def test_2(self):
        msg = "0010010001100000011100100010000000010000000000000010000001110000"
        key = "111000000000000000000100000000000000000100000000000000011111000000000000000000000011000000000000000000000000100000000000000000000100000000000000000000000000100000000000"
        ciphertext = uoc_des3(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "0101000100000111101111110100000110010100100111011100100110100011")

    def test_3(self):
        msg = "0010010001100100011100100010000100010001000111000010000001110000"
        key = "111000000000010000000100000000011000000100000001100000011111000000000010000000000011000001000000010000000000100000010000001000000100000000000000000000000000100000010000"
        ciphertext = uoc_des3(msg, key)
        self.assertEqual(len(ciphertext), 64)
        self.assertEqual(ciphertext, "0100000001010011111101100001111011101010110010101011110001000001")






class Test_2_2_G(unittest.TestCase):

    def test_1(self):
        i = "0000000000000000000000000000000000000000000000000000000000000000"
        o = uoc_g(i)
        self.assertEqual(len(o), 168)
        self.assertEqual(o, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
 
    def test_2(self):
        i = "1111111111000000000000000000000000000000000000000000000000000011"
        o = uoc_g(i)
        self.assertEqual(len(o), 168)
        self.assertEqual(o, "111111111100000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000001111111111")
 
    def test_3(self):
        i = "1111111111000000000000000000000000000000000000000000000000000011"
        o = uoc_g(i)
        self.assertEqual(len(o), 168)
        self.assertEqual(o, "111111111100000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000001111111111")
 




class Test_2_3_Padding(unittest.TestCase):

    def test__1(self):
        # no padding
        block_len = 128
        message = "CRYPTOGRAPHY0123"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01000011010100100101100101010000010101000100111101000111010100100100000101010000010010000101100100110000001100010011001000110011"
        self.assertEqual(o, exp_o)

    def test_2(self):
        # no padding
        block_len = 256
        message = "CRYPTOGRAPHY0123CRYPTOGRAPHY3210"
        o = uoc_naive_padding(message, block_len)
        exp_o = "010000110101001001011001010100000101010001001111010001110101001001000001010100000100100001011001001" \
                "100000011000100110010001100110100001101010010010110010101000001010100010011110100011101010010010000" \
                "0101010000010010000101100100110011001100100011000100110000"
        self.assertEqual(o, exp_o)

    def test_3(self):
        # no padding
        block_len = 32
        message = "WORL"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01010111010011110101001001001100"
        self.assertEqual(o, exp_o)

    def test_4(self):
        block_len = 128
        message = "CRYPTOGRAPHY"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01000011010100100101100101010000010101000100111101000111010100100100000101010000010010000101100111111111111111111111111111111111"
        self.assertEqual(o, exp_o)

    def test_5(self):
        block_len = 256
        message = "CRYPTOGRAPHY"
        o = uoc_naive_padding(message, block_len)
        exp_o = "0100001101010010010110010101000001010100010011110100011101010010010000010101000001001000010110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
        self.assertEqual(o, exp_o)

    def test_6(self):
        block_len = 32
        message = "WOR"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01010111010011110101001011111111"
        self.assertEqual(o, exp_o)

    def test_7(self):
        block_len = 128
        message = "CRYPTOGRA"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01000011010100100101100101010000010101000100111101000111010100100100000111111111111111111111111111111111111111111111111111111111"
        self.assertEqual(o, exp_o)

    def test_8(self):
        block_len = 128
        message = "CRYPTOGRAPHY012"
        o = uoc_naive_padding(message, block_len)
        exp_o = "01000011010100100101100101010000010101000100111101000111010100100100000101010000010010000101100100110000001100010011001011111111"
        self.assertEqual(o, exp_o)





class Test_2_4_Hash(unittest.TestCase):

    def test_1(self):
        # no padding, 1 block
        block_size = 64
        message = "CRYPTOGRAPHY0123"
        exp_hash = "1100000100101000110110110000001010110110011100101111100011011010"
        h = uoc_hash(message)
        self.assertEqual(len(h), block_size)
        self.assertEqual(h, exp_hash)

    def test_2(self):
        # with padding, 1 block
        block_size = 64
        message = "CRYPTOGRAPHY"
        exp_hash = "1100111011010111111000011000000000111010010010010111101110100100"
        h = uoc_hash(message)
        self.assertEqual(len(h), block_size)
        self.assertEqual(h, exp_hash)

    def test_3(self):
        # no padding, 2 blocks
        block_size = 64
        message = "HELLOWORLDCRIPTOGRAPHYISABOUTHAS"
        exp_hash = "1100011110111111101001011011101000111100101111001000011111101101"
        h = uoc_hash(message)
        self.assertEqual(len(h), block_size)
        self.assertEqual(h, exp_hash)

    def test_4(self):
        # with padding, multiple blocks
        block_size = 64
        message = "HELLOWORLDCRIPTOGRAPHYISABOUTHASHFUNCTIONS"
        exp_hash = "1101101100100111001111011101111001001001010011010100110000010000"
        h = uoc_hash(message)
        self.assertEqual(len(h), block_size)
        self.assertEqual(h, exp_hash)

    def test_5(self):
        # with padding, multiple blocks
        block_size = 64
        message = "THISISAVERYLONGLONGMESSAGETOTESTTHEIMPLEMENTATIONOFOURHASHFUNCTION"
        exp_hash = "1011100010011001101110000011011110111000100101111101001000000101"
        h = uoc_hash(message)
        self.assertEqual(len(h), block_size)
        self.assertEqual(h, exp_hash)




class Test_2_5_Collision(unittest.TestCase):

    def test_1(self):
        prefix = "CRYPTO"
        (m1, m2) = uoc_collision(prefix)
        self.assertEqual(uoc_hash(m1), uoc_hash(m2))
        self.assertNotEqual(m1, m2)

    def test_2(self):
        prefix = "ACOLLISION"
        (m1, m2) = uoc_collision(prefix)
        self.assertEqual(uoc_hash(m1), uoc_hash(m2))
        self.assertNotEqual(m1, m2)

    def test_3(self):
        prefix = "ACOLLISIONISNICE"
        (m1, m2) = uoc_collision(prefix)
        self.assertEqual(uoc_hash(m1), uoc_hash(m2))
        self.assertNotEqual(m1, m2)

    def test_4(self):
        prefix = "TWOMESSAGESWITHTHESAMEHASHTHISIA"
        (m1, m2) = uoc_collision(prefix)
        self.assertEqual(uoc_hash(m1), uoc_hash(m2))
        self.assertNotEqual(m1, m2)


if __name__ == '__main__':

    # create a suite with all tests
    test_classes_to_run = [
        Test_1_1_DES, 
        Test_1_1_ECB,
        Test_1_2_CBC,
        Test_1_3_OFB,
        Test_1_4_CTR,
        Test_2_1_DES3,
        Test_2_2_G,
        Test_2_3_Padding,
        Test_2_4_Hash,
        Test_2_5_Collision
    ]
    loader = unittest.TestLoader()
    suites_list = []
    for test_class in test_classes_to_run:
        suite = loader.loadTestsFromTestCase(test_class)
        suites_list.append(suite)

    all_tests_suite = unittest.TestSuite(suites_list)

    # run the test suite with high verbosity
    runner = unittest.TextTestRunner(verbosity=2)
    results = runner.run(all_tests_suite)

